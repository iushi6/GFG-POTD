class Solution {
    static int length = (int)1e9;
    static void isBST(Node root,int target){
        if(isBSTUtil(root,Integer.MIN_VALUE,Integer.MAX_VALUE))
        {
            if(findSum(root) == target){
                length = Math.min(length,findLength(root));
                //return;
            }
        }
        if(root.left != null)
        isBST(root.left,target);
        if(root.right != null)
        isBST(root.right,target);
    }
    static boolean isBSTUtil(Node root,int min,int max){
        if(root == null)
        return true;
        if(root.data<=min || root.data>=max)
        return false;
        return isBSTUtil(root.left,min,root.data) && isBSTUtil(root.right,root.data,max);
    }
    static int findSum(Node root){
        if(root == null)
        return 0;
        int l = findSum(root.left);
        int r = findSum(root.right);
        return l+r+root.data;
    }
    static int findLength(Node root){
        if(root == null)
        return 0;
        int l = findLength(root.left);
        int r = findLength(root.right);
        return l+r+1;
    }
    public static int minSubtreeSumBST(int target, Node root) {
        // code here
        length = (int)1e9;
        isBST(root,target);
        if(length == (int)1e9)
        return -1;
        return length;
    }
}
